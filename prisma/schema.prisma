// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  full_name  String?
  email      String       @unique
  cpf        String?
  password   String
  type       String
  role       String
  phone      String?
  birth_date DateTime?
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  addresses  Address[]
  Attendance Attendance[]
  Order      Order[]
}

model Address {
  id           String  @id @default(uuid())
  street       String
  number       String
  apt          String
  neighborhood String
  city         String
  state        String
  user         User?   @relation(fields: [userId], references: [id])
  userId       String?
  Order        Order[]
}

model Attendance {
  id          String @id @default(uuid())
  description String
  author      String

  user User @relation(fields: [userId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String
}

model Product {
  id            String    @id @default(uuid())
  name          String
  description   String
  price         Int
  sale_price    Int?
  reference     Int       @default(autoincrement())
  volume        Int
  recipient     String
  store         Int
  grape         String
  color         String
  scent         String
  harmonization String
  matchId       String?
  match         Product?  @relation("product_product", fields: [matchId], references: [id])
  matches       Product[] @relation("product_product")
  category      Category? @relation(fields: [categoryId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  categoryId String
  Order      Order?   @relation(fields: [orderId], references: [id])
  orderId    String?

  @@map("product")
}

model Category {
  id                String     @id @default(uuid())
  name              String
  parent_categoryId String?
  parent_category   Category?  @relation("category_category", fields: [parent_categoryId], references: [id])
  child_category    Category[] @relation("category_category")
  Product           Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("category")
}

model Order {
  id          String    @id @default(uuid())
  items       Product[]
  address     Address   @relation(fields: [addressId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  total_price Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  addressId  String
  userId     String

  @@map("order")
}
